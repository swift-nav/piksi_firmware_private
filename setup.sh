#!/usr/bin/env bash

# Copyright (C) 2014 Swift Navigation Inc.
# Contact: Bhaskar Mookerji <mookerji@swiftnav.com>

# This source is subject to the license found in the file 'LICENSE' which must
# be be distributed together with this source. All other rights reserved.

# THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
# EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
#
# Script for setting up piksi_firmware development environment across
# different development environments. It's not guaranteed to be
# idempotent, or have any other guarantees for that matter, but if
# you're having issues with your particular development platform,
# please let us know: we are trying to account for as many hacks as
# possible

LINUX_TOOLCHAIN_URL="https://github.com/swift-nav/swift-toolchains/releases/download/pfwp/gcc-arm-none-eabi-6-2017-q2-update-linux.tar.bz2"
MACOS_TOOLCHAIN_URL="https://github.com/swift-nav/swift-toolchains/releases/download/pfwp_mac_toolchain/gcc-arm-none-eabi-6-2017-q2-update-mac.tar.bz2"

####################################################################
## Utilities.

function color () {
    # Print with color.
    printf '\033[%sm%s\033[m\n' "$@"
}

purple='35;1'
red='31;1'
red_flashing='31;5'
splash_color=$red
message_color=$purple
error_color=$red_flashing

function log_info () {
    color $message_color "$@"
}

function log_error () {
    color $error_color "$@"
}

function build () {
    # Pulls down git submodules and builds the project, assuming that
    # all other system, and ARM GCC have been installed.
    log_info "Initializing Git submodules for ChibiOS, libopencm3, libsbp and starling..."
    git submodule update --init
    if ! [[ -z $1 ]]
    then
       pushd starling
       git remote update
       git checkout $1
       log_info "Checked out version '$1' of starling"
       popd
    fi
    log_info "Building piksi_firmware..."
    make clean
    make
}

#########################
## Linux dependency management and build

function piksi_splash_linux () {
    # Splash screen. Generated by http://patorjk.com/software/taag/.
    log_info "
          _/\/\/\/\/\____/\/\____/\/\____________________/\/\___
          _/\/\____/\/\__________/\/\__/\/\____/\/\/\/\_________
          _/\/\/\/\/\____/\/\____/\/\/\/\____/\/\/\/\____/\/\___
          _/\/\__________/\/\____/\/\/\/\__________/\/\__/\/\___
         _/\/\__________/\/\/\__/\/\__/\/\__/\/\/\/\____/\/\/\__

         Welcome to piksi_firmware development installer!

    "
}

####################################################################
## Mac OS X dependency management and build

function piksi_splash_osx () {
    # Splash screen. Generated by http://patorjk.com/software/taag/.
    log_info "
         _______ _________ _        _______ _________
        (  ____ )\__   __/| \    /\(  ____ \\__   __/
        | (    )|   ) (   |  \  / /| (    \/   ) (   
        | (____)|   | |   |  (_/ / | (_____    | |   
        |  _____)   | |   |   _ (  (_____  )   | |   
        | (         | |   |  ( \ \       ) |   | |   
        | )      ___) (___|  /  \ \/\____) |___) (___
        |/       \_______/|_/    \/\_______)\_______/
                                             
         Welcome to piksi_firmware development installer!

    "
}

function homebrew_install () {
    # Provides homebrew for OS X and fixes permissions for brew
    # access. Run this if you need to install brew by:
    #    source ./setup.sh
    #    homebrew_install
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    brew doctor
    brew update
    # Homebrew apparently requires the contents of /usr/local to be
    # chown'd to your username.  See:
    # http://superuser.com/questions/254843/cant-install-brew-formulae-correctly-permission-denied-in-usr-local-lib
    sudo chown -R `whoami` /usr/local
}

function bootstrap_osx () {
    log_info "Checking base OS X development tools..."
    # Download and install Command Line Tools
    if ! which gcc &>/dev/null; then
        log_info "Installing Xcode developer tools..."
        xcode-select --install
    fi
    # Download and install Homebrew
    if ! which brew &>/dev/null; then
        log_info "Installing homebrew..."
        homebrew_install
    fi

}

####################################################################
## Entry points

function install_toolchain() {
    URL=$1

    if [[ ! -d ~/gcc-arm-none-eabi/ ]]; then
        mkdir ~/gcc-arm-none-eabi
    elif [[ -x ~/gcc-arm-none-eabi/bin/arm-none-eabi-gcc ]]; then
        log_info "Looks like you already have an arm toolchain installed at ~/gcc-arm-none-eabi/, not installing the arm toolchain"
	return
    fi

    wget -O - ${URL} | tar -x -C ~/gcc-arm-none-eabi/ --strip-components=1
    echo "export PATH=$PATH:$HOME/gcc-arm-none-eabi/bin" >> ~/.profile
}

function run_all_platforms () {
    if [ ! -e ./setup.sh ] ; then
        log_error "Error: setup.sh should be run from piksi_firmware toplevel." >&2
        exit 1
    elif [[ "$OSTYPE" == "linux-"* ]]; then
        piksi_splash_linux
        log_info "Checking system dependencies for Linux..."
        log_info "Please enter your password for apt-get..."
        log_info "Updating..."
        sudo apt-get update
        sudo apt-get install -y git build-essential cmake wget libc6:i386 libstdc++6:i386 curl python-pip
	install_toolchain ${LINUX_TOOLCHAIN_URL}
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        piksi_splash_osx
        log_info "Checking system dependencies for OSX..."
        log_info "Please enter your password..."
        bootstrap_osx
        brew update
        brew install wget cmake gnu-tar
	install_toolchain ${MACOS_TOOLCHAIN_URL}
    else
        log_error "This script does not support this platform. Please contact mookerji@swiftnav.com."
        exit 1
    fi
    if ! which arm-none-eabi-gcc &>/dev/null; then
      log_error "Please run 'source ~/.profile' to load the ARM toolchain into the current shell."
      log_info ""
    fi
    log_info "If you'd like to build the firmware, run: bash setup.sh -x build."
}

function show_help() {
    log_info "piksi_firmware development setup script."
    log_info ""
    log_info "Usage: bash setup.sh -x <command>, where:"
    log_info "   install, Install dependencies."
    log_info "   build,   Build firmware."
    log_info "   help,    This help message."
    log_info ""
}

set -e -u

STARLING_COMMIT=""

while getopts ":x:s:" opt; do
    case $opt in
        x)
            if [[ "$OPTARG" == "install" ]]; then
                run_all_platforms
                exit 0
            elif [[ "$OPTARG" == "build" ]]; then
                log_info "build piksi_firmware."
                build "$STARLING_COMMIT"
                exit 0
            elif [[ "$OPTARG" == "info" ]]; then
                log_info "piksi_firmware development setup script.."
                exit 0
            elif [[ "$OPTARG" == "help" ]]; then
                show_help
                exit 0
            else
                echo "Invalid option: -x $OPTARG" >&2
            fi
            ;;
        s)
            STARLING_COMMIT="$OPTARG"
            echo "Using starling commit '$STARLING_COMMIT'" >&2
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            exit 1
            ;;
    esac
done
show_help
