# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.
SWIFTNAV_ROOT := $(shell pwd)/..
LIB_BUILDFOLDER = build_pm_test
STARLING_BUILDDIR=$(SWIFTNAV_ROOT)/starling/$(LIB_BUILDFOLDER)
LIBSWIFTNAV_BUILDDIR=$(STARLING_BUILDDIR)/third_party/libswiftnav
STARLING_SEARCHPATH=$(STARLING_BUILDDIR)
LIBSWIFTNAV_SEARCHPATH=$(LIBSWIFTNAV_BUILDDIR)
STARLING_FEC_SEARCHPATH=$(STARLING_BUILDDIR)/libfec
LIBSBP_SEARCHPATH=$(SWIFTNAV_ROOT)/libsbp/c

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ../third_party/googletest/googletest

# Where to find user code.
USER_SRC_DIR = ../src

# Where to find tests
TEST_DIR = .

OBJDIR = obj
TEST_SRC_DIR = src
STUBS_DIR = stubs

ifneq ("$(MAKECMDGOALS)", "clean")
  ifndef C_COMPILER
    $(info C_COMPILER environment variable is not set,\
      defaulting to gcc-$(shell gcc -dumpversion))
    C_COMPILER = gcc
  endif

  ifndef CXX_COMPILER
    $(info CXX_COMPILER environment variable is not set,\
      defaulting to g++-$(shell g++ -dumpversion))
    CXX_COMPILER = g++
  endif
endif

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# C warnings
CWARN = -Wall -Wextra -Werror -Wimplicit \
	-Wshadow -Wswitch-default -Wswitch-enum -Wundef \
	-Wuninitialized -Wstrict-prototypes \
	-Wformat=2 \
	-Wimplicit-function-declaration  \
	-Wformat-security -Wpointer-arith \
	-Wno-missing-field-initializers  \
	-Wno-implicit-fallthrough

# Flags passed to the C compiler.
CFLAGS += -g $(CWARN) -std=gnu99 -D_GNU_SOURCE

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -Werror --coverage -std=c++11

# Compiler include directories.
INCLUDE_DIRS :=
INCLUDE_DIRS += -I./
INCLUDE_DIRS += -I$(STUBS_DIR)
INCLUDE_DIRS += -I$(USER_SRC_DIR)
INCLUDE_DIRS += -I$(USER_SRC_DIR)/board/v3/
INCLUDE_DIRS += -I../starling/include
INCLUDE_DIRS += -I../starling/third_party/libswiftnav/include
INCLUDE_DIRS += -I../starling/libfec/include
INCLUDE_DIRS += -I$(USER_SRC_DIR)/utils
INCLUDE_DIRS += -I$(USER_SRC_DIR)/hal
INCLUDE_DIRS += -I$(USER_SRC_DIR)/calc
INCLUDE_DIRS += -I$(USER_SRC_DIR)/cfg
INCLUDE_DIRS += -I$(USER_SRC_DIR)/reacq
INCLUDE_DIRS += -I$(USER_SRC_DIR)/soft_macq
INCLUDE_DIRS += -I$(USER_SRC_DIR)/track
INCLUDE_DIRS += -I$(USER_SRC_DIR)/main
INCLUDE_DIRS += -I$(USER_SRC_DIR)/sbp
INCLUDE_DIRS += -I$(LIBSBP_SEARCHPATH)/include

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

.PHONY: lsnp

all : lsnp run_tests

lsnp :
	@printf "BUILD Starling\n"; \
	mkdir -p $(STARLING_BUILDDIR); cd $(STARLING_BUILDDIR); \
	cmake -DMAX_CHANNELS=45 \
	      -DPIKSI_MULTI_UNIT_TEST=ON \
	      -DCMAKE_C_COMPILER=$(C_COMPILER) \
	      -DCMAKE_CXX_COMPILER=$(CXX_COMPILER) \
	      -DENABLE_AUTOFORMAT=OFF \
	      ../
	$(MAKE) -C $(STARLING_BUILDDIR) --no-print-directory

clean :
	@printf "CLEAN   Starling\n"; \
	$(RM) -rf $(STARLING_BUILDDIR)
	$(RM) -rf $(OBJDIR)
	rm -f run_tests

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
$(OBJDIR)/gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc -o $@

$(OBJDIR)/gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc -o $@

$(OBJDIR)/gtest_main.a : $(OBJDIR)/gtest-all.o $(OBJDIR)/gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# A test should link with either gtest.a or gtest_main.a, depending on whether
# it defines its own main() function.

# Rule for creating output dir for build deliverables
$(OBJDIR):
	mkdir -p $(OBJDIR)

vpath %.c $(USER_SRC_DIR) \
          $(USER_SRC_DIR)/lib \
          $(USER_SRC_DIR)/cn0_est \
          $(USER_SRC_DIR)/utils/filters \
          $(USER_SRC_DIR)/soft_macq \
          $(USER_SRC_DIR)/utils/sv_visibility \
          $(USER_SRC_DIR)/nav_msg \
          $(USER_SRC_DIR)/utils/bit_sync \
          $(USER_SRC_DIR)/utils/run_stats \
          $(USER_SRC_DIR)/utils/clock_filter \
          $(USER_SRC_DIR)/hal \
          $(USER_SRC_DIR)/utils/gnss_capabilities \
          $(USER_SRC_DIR)/utils/sbas_select \
          $(USER_SRC_DIR)/calc \
          $(USER_SRC_DIR)/reacq \
          $(USER_SRC_DIR)/sbp \
          $(USER_SRC_DIR)/utils/shm \
          $(USER_SRC_DIR)/utils/nav_bit_fifo \
          $(STUBS_DIR)

vpath %.cc $(TEST_SRC_DIR)

# Code to test
C_SRCS = fixed_fft_r2.c \
         sbas_select.c \
         $(notdir $(shell find $(USER_SRC_DIR)/cn0_est -name '*.c')) \
         $(notdir $(shell find $(USER_SRC_DIR)/utils/filters -name '*.c')) \
         prns.c \
         gal_prns.c \
         bds2_prns.c \
         qzss_prns.c \
         clock_filter.c \
         calc_nav_meas.c \
         piksi_systime.c \
         sv_visibility.c \
         cnav_msg.c \
         bit_sync.c \
         nav_msg_glo.c \
         run_stats.c \
         gnss_capabilities.c \
         search_manager.c \
         task_generator.c \
         scheduler.c \
         stubs.c \
         ch_stubs.c \
         nav_msg.c \
         nav_msg_bds.c \
         sbp_utils.c \
         shm.c \
         cnav_msg_storage.c \
         nav_bit_fifo.c

# Test source files
CXX_SRCS = $(notdir $(shell find $(TEST_SRC_DIR) -name '*.cc'))

OBJS = $(patsubst %.c,$(OBJDIR)/%.o,$(C_SRCS))
OBJS += $(patsubst %.cc,$(OBJDIR)/%.o,$(CXX_SRCS))

# Rule for C files
$(OBJDIR)/%.o: %.c
	$(CC) $(CFLAGS) $(INCLUDE_DIRS) -c $< -o $@

# Rule for C++ files
$(OBJDIR)/%.o: %.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDE_DIRS) -c $< -o $@

OBJS += $(OBJDIR)/gtest_main.a

LIBS = -lstarling -lswiftnav -lpthread -lfec
LIB_PATH = -L$(STARLING_SEARCHPATH)/src
LIB_PATH += -L$(LIBSWIFTNAV_SEARCHPATH)
LIB_PATH += -L$(STARLING_FEC_SEARCHPATH)
LIB_RPATH = -Wl,-rpath,$(STARLING_SEARCHPATH)/src
LIB_RPATH += -Wl,-rpath,$(LIBSWIFTNAV_SEARCHPATH)
LIB_RPATH += -Wl,-rpath,$(STARLING_FEC_SEARCHPATH)

run_tests : lsnp $(OBJDIR) $(OBJS)
	$(CXX) $(CXXFLAGS) $(OBJS) $(LIB_PATH) $(LIBS) -o $@ $(LIB_RPATH)
