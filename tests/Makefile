# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.
SWIFTNAV_ROOT := $(shell pwd)/..
LIB_BUILDFOLDER = build_pm_test
LIBSWIFTNAV_BUILDDIR=$(SWIFTNAV_ROOT)/libswiftnav/$(LIB_BUILDFOLDER)
LIBSWIFTNAV_SEARCHPATH=$(LIBSWIFTNAV_BUILDDIR)/src
LIBSWIFTNAV_COMMON_SEARCHPATH=$(LIBSWIFTNAV_BUILDDIR)/refactor/common

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ../third_party/googletest/googletest

# Where to find user code.
USER_SRC_DIR = ../src

# Where to find tests
TEST_DIR = .

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread --coverage

# Compiler include directories.
INCLUDE_DIRS :=
INCLUDE_DIRS += -I./
INCLUDE_DIRS += -I$(USER_SRC_DIR)
INCLUDE_DIRS += -I$(USER_SRC_DIR)/board/v3/
INCLUDE_DIRS += -I../libswiftnav/include
INCLUDE_DIRS += -I../libswiftnav/refactor/common
INCLUDE_DIRS += -I../libswiftnav/include/libswiftnav
INCLUDE_DIRS += -I../libswiftnav/libfec/include
INCLUDE_DIRS += -I$(USER_SRC_DIR)/utils

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

.PHONY: lsnp

all : lsnp run_tests

lsnp :
	@printf "BUILD libswiftnav\n"; \
	mkdir -p $(LIBSWIFTNAV_BUILDDIR); cd $(LIBSWIFTNAV_BUILDDIR); \
	cmake -DMAX_CHANNELS=45 \
	      -DPIKSI_MULTI_UNIT_TEST=ON \
	      -DCMAKE_C_COMPILER=gcc-5 \
	      -DCMAKE_CXX_COMPILER=g++-5 \
	      -DENABLE_AUTOFORMAT=OFF \
	      ../
	$(MAKE) -C $(LIBSWIFTNAV_BUILDDIR) --no-print-directory

clean :
	@printf "CLEAN   libswiftnav\n"; \
	$(RM) -rf $(LIBSWIFTNAV_BUILDDIR)
	rm -f run_tests gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

fixed_fft_r2.o : $(USER_SRC_DIR)/lib/fixed_fft_r2.h $(USER_SRC_DIR)/lib/fixed_fft_r2.c $(GTEST_HEADERS)
	$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_SRC_DIR)/lib/fixed_fft_r2.c

test_fft.o : $(TEST_DIR)/test_fft.cc $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDE_DIRS) -c $(TEST_DIR)/test_fft.cc

piksi_systime.o : $(USER_SRC_DIR)/piksi_systime.h $(USER_SRC_DIR)/chconf.h ./ch.h $(USER_SRC_DIR)/piksi_systime.c $(GTEST_HEADERS)
	$(CC) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDE_DIRS) -c $(USER_SRC_DIR)/piksi_systime.c

test_piksi_systime.o : $(TEST_DIR)/test_piksi_systime.cc $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDE_DIRS) -c $(TEST_DIR)/test_piksi_systime.cc

sbas_select.o : $(USER_SRC_DIR)/sbas_select.h $(USER_SRC_DIR)/sbas_select.c $(GTEST_HEADERS)
	$(CC) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDE_DIRS) -c $(USER_SRC_DIR)/sbas_select.c

test_sbas_select.o : $(TEST_DIR)/test_sbas_select.cc $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDE_DIRS) -c $(TEST_DIR)/test_sbas_select.cc

cn0_est_basic.o : $(USER_SRC_DIR)/cn0_est/cn0_est_common.h $(USER_SRC_DIR)/cn0_est/cn0_est_basic.c $(GTEST_HEADERS)
	$(CC) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDE_DIRS) -c $(USER_SRC_DIR)/cn0_est/cn0_est_basic.c

cn0_est_bl.o : $(USER_SRC_DIR)/cn0_est/cn0_est_common.h $(USER_SRC_DIR)/cn0_est/cn0_est_bl.c $(GTEST_HEADERS)
	$(CC) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDE_DIRS) -c $(USER_SRC_DIR)/cn0_est/cn0_est_bl.c

cn0_est_mm.o : $(USER_SRC_DIR)/cn0_est/cn0_est_common.h $(USER_SRC_DIR)/cn0_est/cn0_est_mm.c $(GTEST_HEADERS)
	$(CC) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDE_DIRS) -c $(USER_SRC_DIR)/cn0_est/cn0_est_mm.c

cn0_est_nwpr.o : $(USER_SRC_DIR)/cn0_est/cn0_est_common.h $(USER_SRC_DIR)/cn0_est/cn0_est_nwpr.c $(GTEST_HEADERS)
	$(CC) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDE_DIRS) -c $(USER_SRC_DIR)/cn0_est/cn0_est_nwpr.c

cn0_est_rscn.o : $(USER_SRC_DIR)/cn0_est/cn0_est_common.h $(USER_SRC_DIR)/cn0_est/cn0_est_rscn.c $(GTEST_HEADERS)
	$(CC) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDE_DIRS) -c $(USER_SRC_DIR)/cn0_est/cn0_est_rscn.c

cn0_est_snv.o : $(USER_SRC_DIR)/cn0_est/cn0_est_common.h $(USER_SRC_DIR)/cn0_est/cn0_est_snv.c $(GTEST_HEADERS)
	$(CC) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDE_DIRS) -c $(USER_SRC_DIR)/cn0_est/cn0_est_snv.c

test_cn0_estimator.o : $(TEST_DIR)/test_cn0_estimator.cc $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDE_DIRS) -c $(TEST_DIR)/test_cn0_estimator.cc

filter_bw2.o : $(USER_SRC_DIR)/utils/filters/filter_common.h $(USER_SRC_DIR)/utils/filters/filter_bw2.c $(GTEST_HEADERS)
	$(CC) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDE_DIRS) -c $(USER_SRC_DIR)/utils/filters/filter_bw2.c

filter_lp1.o : $(USER_SRC_DIR)/utils/filters/filter_common.h $(USER_SRC_DIR)/utils/filters/filter_lp1.c $(GTEST_HEADERS)
	$(CC) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDE_DIRS) -c $(USER_SRC_DIR)/utils/filters/filter_lp1.c

test_filters.o : $(TEST_DIR)/test_filters.cc $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDE_DIRS) -c $(TEST_DIR)/test_filters.cc

track_fll1.o : $(USER_SRC_DIR)/utils/track_loop/trk_loop_common.h $(USER_SRC_DIR)/utils/track_loop/track_fll1.c $(GTEST_HEADERS)
	$(CC) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDE_DIRS) -c $(USER_SRC_DIR)/utils/track_loop/track_fll1.c

track_fll1_pll2.o : $(USER_SRC_DIR)/utils/track_loop/trk_loop_common.h $(USER_SRC_DIR)/utils/track_loop/track_fll1_pll2.c $(GTEST_HEADERS)
	$(CC) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDE_DIRS) -c $(USER_SRC_DIR)/utils/track_loop/track_fll1_pll2.c

track_fll2.o : $(USER_SRC_DIR)/utils/track_loop/trk_loop_common.h $(USER_SRC_DIR)/utils/track_loop/track_fll2.c $(GTEST_HEADERS)
	$(CC) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDE_DIRS) -c $(USER_SRC_DIR)/utils/track_loop/track_fll2.c

track_fll2_pll3.o : $(USER_SRC_DIR)/utils/track_loop/trk_loop_common.h $(USER_SRC_DIR)/utils/track_loop/track_fll2_pll3.c $(GTEST_HEADERS)
	$(CC) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDE_DIRS) -c $(USER_SRC_DIR)/utils/track_loop/track_fll2_pll3.c

track_pll3.o : $(USER_SRC_DIR)/utils/track_loop/trk_loop_common.h $(USER_SRC_DIR)/utils/track_loop/track_pll3.c $(GTEST_HEADERS)
	$(CC) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDE_DIRS) -c $(USER_SRC_DIR)/utils/track_loop/track_pll3.c

track_pll3b.o : $(USER_SRC_DIR)/utils/track_loop/trk_loop_common.h $(USER_SRC_DIR)/utils/track_loop/track_pll3b.c $(GTEST_HEADERS)
	$(CC) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDE_DIRS) -c $(USER_SRC_DIR)/utils/track_loop/track_pll3b.c
	
trk_loop_common.o : $(USER_SRC_DIR)/utils/track_loop/trk_loop_common.h $(USER_SRC_DIR)/utils/track_loop/trk_loop_common.c $(GTEST_HEADERS)
	$(CC) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDE_DIRS) -c $(USER_SRC_DIR)/utils/track_loop/trk_loop_common.c

test_trk_loop.o : $(TEST_DIR)/test_trk_loop.cc $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDE_DIRS) -c $(TEST_DIR)/test_trk_loop.cc

prns.o : $(USER_SRC_DIR)/soft_macq/prns.h $(USER_SRC_DIR)/soft_macq/prns.c $(GTEST_HEADERS)
	$(CC) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDE_DIRS) -c $(USER_SRC_DIR)/soft_macq/prns.c

test_prns.o : $(TEST_DIR)/test_prns.cc $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDE_DIRS) -c $(TEST_DIR)/test_prns.cc

clock_filter.o : $(USER_SRC_DIR)/clock_filter.h $(USER_SRC_DIR)/clock_filter.c $(GTEST_HEADERS)
	$(CC) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDE_DIRS) -c $(USER_SRC_DIR)/clock_filter.c

test_clock_filter.o : $(TEST_DIR)/test_clock_filter.cc $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDE_DIRS) -c $(TEST_DIR)/test_clock_filter.cc

OBJS = \
  fixed_fft_r2.o \
  test_fft.o \
  piksi_systime.o \
  test_piksi_systime.o \
  sbas_select.o \
  test_sbas_select.o \
  cn0_est_basic.o \
  cn0_est_bl.o \
  cn0_est_mm.o \
  cn0_est_nwpr.o \
  cn0_est_rscn.o \
  cn0_est_snv.o \
  filter_bw2.o \
  filter_lp1.o \
  test_cn0_estimator.o \
  test_filters.o \
  track_fll1.o \
  track_fll1_pll2.o \
  track_fll2.o \
  track_fll2_pll3.o \
  track_pll3.o \
  track_pll3b.o \
  trk_loop_common.o \
  test_trk_loop.o \
  prns.o \
  test_prns.o \
  clock_filter.o \
  test_clock_filter.o \
  gtest_main.a

LIBS = -lswiftnav -lswiftnav-common -lpthread
LIB_PATH = -L$(LIBSWIFTNAV_SEARCHPATH) -L$(LIBSWIFTNAV_COMMON_SEARCHPATH)
LIB_RPATH = -Wl,-rpath,$(LIBSWIFTNAV_SEARCHPATH) -Wl,-rpath,$(LIBSWIFTNAV_COMMON_SEARCHPATH)

run_tests : lsnp $(OBJS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(OBJS) $(LIB_PATH) $(LIBS) -o $@ $(LIB_RPATH)
