# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.
SWIFTNAV_ROOT := $(shell pwd)/..
LIB_BUILDFOLDER = build_pm_test
LIBSWIFTNAV_BUILDDIR=$(SWIFTNAV_ROOT)/libswiftnav/$(LIB_BUILDFOLDER)
LIBSWIFTNAV_SEARCHPATH=$(LIBSWIFTNAV_BUILDDIR)/src
LIBSWIFTNAV_COMMON_SEARCHPATH=$(LIBSWIFTNAV_BUILDDIR)/refactor/common

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ../third_party/googletest/googletest

# Where to find user code.
USER_SRC_DIR = ../src

# Where to find tests
TEST_DIR = .

OBJDIR = obj

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread --coverage

# Compiler include directories.
INCLUDE_DIRS :=
INCLUDE_DIRS += -I./
INCLUDE_DIRS += -I$(USER_SRC_DIR)
INCLUDE_DIRS += -I$(USER_SRC_DIR)/board/v3/
INCLUDE_DIRS += -I../libswiftnav/include
INCLUDE_DIRS += -I../libswiftnav/refactor/common
INCLUDE_DIRS += -I../libswiftnav/include/libswiftnav
INCLUDE_DIRS += -I../libswiftnav/libfec/include
INCLUDE_DIRS += -I$(USER_SRC_DIR)/utils

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

.PHONY: lsnp

all : lsnp run_tests

lsnp :
	@printf "BUILD libswiftnav\n"; \
	mkdir -p $(LIBSWIFTNAV_BUILDDIR); cd $(LIBSWIFTNAV_BUILDDIR); \
	cmake -DMAX_CHANNELS=45 \
	      -DPIKSI_MULTI_UNIT_TEST=ON \
	      -DCMAKE_C_COMPILER=gcc-5 \
	      -DCMAKE_CXX_COMPILER=g++-5 \
	      -DENABLE_AUTOFORMAT=OFF \
	      ../
	$(MAKE) -C $(LIBSWIFTNAV_BUILDDIR) --no-print-directory

clean :
	@printf "CLEAN   libswiftnav\n"; \
	$(RM) -rf $(LIBSWIFTNAV_BUILDDIR)
	$(RM) -rf $(OBJDIR)
	rm -f run_tests

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
$(OBJDIR)/gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc -o $@

$(OBJDIR)/gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc -o $@

$(OBJDIR)/gtest_main.a : $(OBJDIR)/gtest-all.o $(OBJDIR)/gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

$(OBJDIR):
	mkdir -p $(OBJDIR)

vpath %.c $(USER_SRC_DIR) \
          $(USER_SRC_DIR)/lib \
          $(USER_SRC_DIR)/cn0_est \
          $(USER_SRC_DIR)/utils/filters \
          $(USER_SRC_DIR)/utils/track_loop \
          $(USER_SRC_DIR)/soft_macq

C_SRCS = fixed_fft_r2.c \
         sbas_select.c \
         $(notdir $(shell find $(USER_SRC_DIR)/cn0_est -name '*.c')) \
         $(notdir $(shell find $(USER_SRC_DIR)/utils/filters -name '*.c')) \
         $(notdir $(shell find $(USER_SRC_DIR)/utils/track_loop -name '*.c')) \
         prns.c \
         clock_filter.c

CXX_SRCS = test_fft.cc \
           test_sbas_select.cc \
           test_cn0_estimator.cc \
           test_filters.cc \
           test_trk_loop.cc \
           test_prns.cc \
           test_clock_filter.cc

OBJS = $(patsubst %.c,$(OBJDIR)/%.o,$(C_SRCS))
OBJS += $(patsubst %.cc,$(OBJDIR)/%.o,$(CXX_SRCS))

$(OBJDIR)/%.o: %.c
	$(CC) $(CPPFLAGS) $(INCLUDE_DIRS) -c $< -o $@

$(OBJDIR)/%.o: %.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(INCLUDE_DIRS) -c $< -o $@

OBJS += $(OBJDIR)/gtest_main.a

LIBS = -lswiftnav -lswiftnav-common -lpthread
LIB_PATH = -L$(LIBSWIFTNAV_SEARCHPATH)
LIB_PATH += -L$(LIBSWIFTNAV_COMMON_SEARCHPATH)
LIB_RPATH = -Wl,-rpath,$(LIBSWIFTNAV_SEARCHPATH)
LIB_RPATH += -Wl,-rpath,$(LIBSWIFTNAV_COMMON_SEARCHPATH)

run_tests : lsnp $(OBJDIR) $(OBJS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(OBJS) $(LIB_PATH) $(LIBS) -o $@ $(LIB_RPATH)
