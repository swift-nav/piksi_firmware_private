#!/bin/python

import os
import subprocess
import yaml
from datetime import datetime
import boto3
from botocore.handlers import disable_signing

TEST_BUCKET = os.environ.get('TEST_BUCKET')

def build_prefix():
  '''Figure out which folder to upload this build to based on how the travis build was triggered
  '''
  FOLDER = os.environ.get('TRAVIS_BRANCH')
  if os.environ.get('TRAVIS_PULL_REQUEST') == 'true':
    FOLDER = 'pull_requests/'+FOLDER
  return FOLDER


def build_dir_name():
  '''Construct a descriptive name for this build's directory using a timestamp, the travis build,
  and the git tags.'''
  timestamp = datetime.strftime(datetime.utcnow(),'%Y-%m-%dT%H:%M:%SZ')
  travis_build = os.environ.get('TRAVIS_BUILD_NUMBER')
  build_version = subprocess.check_output(['git', 'describe', '--tags', '--dirty', '--always']).strip()
  BUILD_DIR = "{0}_{1}_{2}".format(timestamp, travis_build, build_version)
  return BUILD_DIR


def upload_firmware(build_config, firmware_key_prefix, s3_resource):
  '''Upload the firmware binary generated by this build to the piksi-complete-build bucket

  Parameters
  ----------
  build_config : dict
    contents of complete-build.yaml. Has the location of the compatible version of other
    files required to run this version of the firmware on piksi
  firmware_key_prefix : str
    prefix key for the 'folder' on S3 to store firmware in
  '''
  firmware_key = firmware_key_prefix
  with open('./build/piksi_firmware.hex', 'r') as f:
    s3_resource.Bucket(TEST_BUCKET).put_object(Key=firmware_key, Body=f)


def cp_fpga_firmware(build_config, s3_resource, firmware_key_prefix):
  '''Copy the compatible fpga firmware from its location on S3 to the firmware bucket

  Parameters
  ----------
  build_config : dict
    contents of complete-build.yaml. Has the location of the compatible version of other
    files required to run this version of the firmware on piksi
  s3_resource : boto3.resource object
    s3 client
  firmware_key_prefix : str
    prefix key for the 'folder' on S3 where all the files for this build are collected.
    Does not end with the firmware filename.'''
  fpga_bucket = build_config['fpga']['bucket']
  fpga_key = build_config['fpga']['prefix'] + '/' + build_config['fpga']['file']

  print "Copying FPGA firmware from {0} to {1}".format(
    's3://{0}/{1}'.format(fpga_bucket, fpga_key),
    firmware_key_prefix
  )
  # should be equivalent to:
  # aws s3 cp fpga_bucket/path/to/fpga_firmware firmware_bucket/path/to/this_firmware
  s3_resource.Object(
    TEST_BUCKET,
    firmware_key_prefix+'/'+build_config['fpga']['file']
  ).copy_from(
    CopySource=fpga_bucket+'/'+fpga_key
  )


def cp_buildroot_images(build_config, s3_resource, firmware_key_prefix):
  '''Copy the images required for the SD card bootloading to the firmware bucket

  Parameters
  ----------
  build_config : dict
    contents of complete-build.yaml. Has the location of the compatible version of other
    files required to run this version of the firmware on piksi
  s3_resource : boto3.resource object
    s3 client
  firmware_key_prefix : str
    prefix key for the 'folder' on S3 where all the files for this build are collected.
    Does not end with firmware filename.
    '''
  firmware_bucket = TEST_BUCKET
  buildroot_bucket = build_config['sd_card']['bucket']
  buildroot_folder = build_config['sd_card']['prefix']

  print "Copying SD card images from {0} to {1}".format(
    's3://{0}/{1}'.format(buildroot_bucket, buildroot_folder),
    firmware_key_prefix
  )
  for file in build_config['sd_card']['files']:
    s3_resource.Object(
      TEST_BUCKET,
      firmware_key_prefix+'/'+file).copy_from(
      CopySource=buildroot_bucket+'/'+buildroot_folder+'/'+file
    )


def copy_files(build_config, firmware_key_prefix):
  '''Copy the correct files from piksi-fpga-unlocked and piksi-buildroot-images buckets to
  piksi-complete-build. Only runs on swift-nav branches because copying between buckets
  requires credentials.

  Parameters
  ----------
  build_config : dict
    contents of complete-build.yaml. Has the location of the compatible version of other
    files required to run this version of the firmware on piksi
  firmware_key_prefix : str
    prefix key for the 'folder' on S3 where all the files for this build are collected
  '''
  s3 = boto3.resource('s3')
  cp_fpga_firmware(build_config, s3, firmware_key_prefix)
  cp_buildroot_images(build_config, s3, firmware_key_prefix)


def collect_artifacts():
  with open('complete-build.yaml', 'r') as f:
    build_config = yaml.load(f)
  build_folder = build_prefix()
  build_name = build_dir_name()
  firmware_key_prefix = '{0}/{1}/{2}'.format(
    build_config['piksi_version'],
    build_folder,
    build_name
  )

  s3 = boto3.resource('s3')
  s3.meta.client.meta.events.register('choose-signer.s3.*', disable_signing)
  upload_firmware(build_config, firmware_key_prefix, s3)
  
  # PRs don't have access to the AWS keys, which copying between these buckets requires.
  if build_type != 'pull_requests':
    copy_files(build_config, firmware_key_prefix)


if __name__ == "__main__":
  # script used in .travis.yml, conceptually similar to upload_artifacts.sh in the piksi_buildroot
  # repo, but using Python to be able to use the pyyaml parser
  collect_artifacts()
