#!/bin/python

import os
import subprocess
import yaml
from datetime import datetime
import boto3
from botocore.handlers import disable_signing


def type_of_build():
  '''Figure out which folder to upload this build to based on how the travis build was triggered
  '''
  if os.environ.get('TRAVIS_PULL_REQUEST') == 'true':
    FOLDER = 'pull_requests'
  else:
    if os.environ.get('TRAVIS_BRANCH') == 'master':
      FOLDER = 'master'
    else:
      FOLDER = 'misc'
  return FOLDER


def build_dir_name():
  timestamp = datetime.strftime(datetime.utcnow(),'%Y-%m-%d-%T')
  travis_build = os.environ.get('TRAVIS_BUILD_NUMBER')
  # short git commit hash
  build_version = subprocess.check_output(['git', 'rev-parse', '--short', 'HEAD']).strip()
  BUILD_DIR = "UTC-{0}_TRAVIS-{1}_COMMIT-{2}".format(timestamp, travis_build, BUILD_VERSION)
  return BUILD_DIR


def upload_firmware(build_config, firmware_key):
  '''Upload the firmware binary generated by this build to the piksi-complete-build bucket

  Parameters
  ----------
  build_config : dict
    contents of complete-build.yaml. Has the location of the compatible version of other
    files required to run this version of the firmware on piksi
  firmware_key : str
    prefix key for the 'folder' on S3 where all the files for this build are collected
  '''
  s3 = boto3.resource('s3')
  s3.meta.client.meta.events.register('choose-signer.s3.*', disable_signing)
  with open('./build/piksi_firmware.hex', 'r') as f:
    s3.Bucket(build_config['firmware']['bucket']).put_object(Key='firmware_key', Body=f)


def cp_fpga_firmware(build_config, s3_resource, firmware_key):
  '''Copy the compatible fpga firmware from its location on S3 to the firmware bucket

  Parameters
  ----------
  build_config : dict
    contents of complete-build.yaml. Has the location of the compatible version of other
    files required to run this version of the firmware on piksi
  s3_resource : boto3.resource object
    s3 client
  firmware_key : str
    prefix key for the 'folder' on S3 where all the files for this build are collected'''
  fpga_bucket = build_config['fpga']['bucket']
  fpga_key = build_config['fpga']['prefix'] + '/' + build_config['fpga']['file']

  print "Copying FPGA firmware from {0} to {1}".format(
    's3://{0}/{1}'.format(fpga_bucket, fpga_key),
    firmware_build_path
  )
  s3_resource.copy(
    {'Bucket': fpga_bucket, 'Key': fpga_key},
    build_config['firmware']['bucket'],
    firmware_key
  )


def cp_buildroot_images(build_config, s3_resource, firmware_key):
  '''Copy the images required for the SD card bootloading to the firmware bucket

  Parameters
  ----------
  build_config : dict
    contents of complete-build.yaml. Has the location of the compatible version of other
    files required to run this version of the firmware on piksi
  s3_resource : boto3.resource object
    s3 client
  firmware_key : str
    prefix key for the 'folder' on S3 where all the files for this build are collected
    '''
  firmware_bucket = build_config['firmware']['bucket']
  buildroot_bucket = build_config['sd_card']['bucket']
  buildroot_folder = build_config['sd_card']['prefix']

  print "Copying SD card images from {0} to {1}".format(
    's3://{0}/{1}'.format(buildroot_bucket, buildroot_folder),
    firmware_build_path
  )
  for file in build_config['sd_card']['files']:
    s3_resource.copy(
      {'Bucket': buildroot_bucket, 'Key': buildroot_folder + '/' + file},
      firmware_bucket,
      firmware_key
    )


def copy_files(build_config, firmware_key):
  '''Copy the correct files from piksi-fpga-unlocked and piksi-buildroot-images buckets to
  piksi-complete-build. Only runs on swift-nav branches because copying between buckets
  requires credentials.

  Parameters
  ----------
  build_config : dict
    contents of complete-build.yaml. Has the location of the compatible version of other
    files required to run this version of the firmware on piksi
  firmware_key : str
    prefix key for the 'folder' on S3 where all the files for this build are collected
  '''
  s3 = boto3.resource('s3')
  cp_fpga_firmware(build_config, s3, firmware_key)
  cp_buildroot_images(build_config, s3, firmware_key)


def collect_artifacts():
  with open('complete-build.yaml', 'r') as f:
    build_config = yaml.load(f)
  build_type = type_of_build()
  build_name = build_dir_name()
  firmware_key = '{0}/{1}/{2}/'.format(
    build_config['piksi_version'],
    bulid_type,
    build_name)
  upload_firmware(firmware_key)
  # PRs don't have access to the AWS keys, which copying between these buckets requires.
  if build_type != 'pull_requests':
    copy_files(build_config, firmware_key)


if __name__ == "__main__":
  # script used in .travis.yml, conceptually similar to upload_artifacts.sh in the piksi_buildroot
  # repo, but using Python to not have to deal with the horrors of parsing yaml in bash
  collect_artifacts()
