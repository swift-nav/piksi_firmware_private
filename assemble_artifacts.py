#!/bin/python

import os
import subprocess
import yaml
from datetime import datetime
import boto3
from botocore.handlers import disable_signing


def type_of_build():
  '''Figure out which folder to upload this build to based on how the travis build was triggered
  '''
  if os.environ.get('TRAVIS_PULL_REQUEST') == 'true':
    FOLDER = 'pull_requests'
  else:
    if os.environ.get('TRAVIS_BRANCH') == 'master':
      FOLDER = 'master'
    else:
      FOLDER = 'misc'
  return FOLDER


def build_dir_name():
  timestamp = datetime.strftime(datetime.utcnow(),'%Y-%m-%d-%T')
  travis_build = os.environ.get('TRAVIS_BUILD_NUMBER')
  # short git commit hash
  build_version = subprocess.check_output(['git', 'rev-parse', '--short', 'HEAD']).strip()
  BUILD_DIR = "UTC-{0}_TRAVIS-{1}_COMMIT-{2}".format(timestamp, travis_build, BUILD_VERSION)
  return BUILD_DIR


def upload_firmware(s3_path):
  '''Upload the firmware binary generated by this build to the piksi-complete-build bucket

  Parameters
  ----------
  s3_path : str
    the path to the 'folder' on S3 to upload the file to.
  '''
  s3 = boto3.resource('s3')
  s3.meta.client.meta.events.register('choose-signer.s3.*', disable_signing)


def collect_files(s3_path):
  '''Copy the correct files from piksi-fpga-unlocked and piksi-buildroot-images buckets to
  piksi-complete-build. Only runs on swift-nav branches because copying between buckets
  requires credentials.

  Parameters
  ----------
  s3_path : str
    the path to the 'folder' on S3 to copy the other binaries to
  '''
  s3 = boto3.resource('s3')
  # stuff


def collect_artifacts():
  build_type = type_of_build()
  build_name = build_dir_name()
  s3_path = 's3://piksi-complete-builds/v3/{0}/{1}/'.format(build_type, build_name)
  upload_firmware(s3_path)
  # PRs don't have access to the AWS keys, which copying between these buckets requires.
  if build_type != 'pull_requests':
    copy_files(s3_path)


if __name__ == "__main__":
  # script used in .travis.yml, conceptually similar to upload_artifacts.sh in the piksi_buildroot
  # repo, but using Python to not have to deal with the horrors of parsing yaml in bash
  collect_artifacts()
